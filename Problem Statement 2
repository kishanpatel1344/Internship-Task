#include <Arduino.h>

#include "freertos/FreeRTOS.h"

#include "freertos/task.h"

#include "freertos/queue.h"

// Task Handles

TaskHandle_t TaskHandle_1;

TaskHandle_t TaskHandle_2;

// Queue Handle

QueueHandle_t Queue1;

// Queue Size and Data Type

#define QUEUE_SIZE 5

typedef struct {

 uint8_t dataID;

 int32_t DataValue;

} Data_t;

// Global Variables

uint8_t G_DataID = 0;

int32_t G_DataValue = 0;

// Task Prototypes

void ExampleTask1(void *pV);

void ExampleTask2(void *pV);

// ExampleTask1: Sends data to Queue1 every 500ms

void ExampleTask1(void *pV) {

 Data_t dataToSend;

 while (1) {

 // Populate dataToSend with global variables

 dataToSend.dataID = G_DataID;

 dataToSend.DataValue = G_DataValue;

 // Send data to the queue

 if (xQueueSend(Queue1, &dataToSend, portMAX_DELAY) == pdPASS) {

 Serial.printf("Sent: dataID=%d, DataValue=%d\n", dataToSend.dataID, 

dataToSend.DataValue);

 }

 // Delay for 500ms

vTaskDelay(pdMS_TO_TICKS(500));

 }

}

// ExampleTask2: Receives data from Queue1 and processes it

void ExampleTask2(void *pV) {

 Data_t receivedData;

 UBaseType_t initialPriority = uxTaskPriorityGet(NULL);

 UBaseType_t newPriority;

 while (1) {

 // Receive data from the queue

 if (xQueueReceive(Queue1, &receivedData, portMAX_DELAY) == pdPASS) {

 Serial.printf("Received: dataID=%d, DataValue=%d\n", receivedData.dataID, 

receivedData.DataValue);

 // Process data based on received dataID and DataValue

 switch (receivedData.dataID) {

 case 0:

 // Delete ExampleTask2

 vTaskDelete(TaskHandle_2);

 break;

 case 1:

 // Process DataValue

 if (receivedData.DataValue == 0) {

 // Increase priority by 2

 newPriority = initialPriority + 2;

 vTaskPrioritySet(NULL, newPriority);

} else if (receivedData.DataValue == 1) {

 // Decrease priority if previously increased

 if (uxTaskPriorityGet(NULL) > initialPriority) {

 vTaskPrioritySet(NULL, initialPriority);

 }

 } else if (receivedData.DataValue == 2) {

 // Delete ExampleTask2

 vTaskDelete(TaskHandle_2);

 }

 break;

 default:

 break;

 }

 }

 }

}

void setup() {

 // Initialize Serial for debugging

 Serial.begin(115200);

 // Create Queue1

 Queue1 = xQueueCreate(QUEUE_SIZE, sizeof(Data_t));

 if (Queue1 == NULL) {

 Serial.println("Failed to create the queue.");

 while (1); // Halt execution

 }

// Create Tasks

 xTaskCreate(ExampleTask1, "Task1", 2048, NULL, 1, &TaskHandle_1);

 xTaskCreate(ExampleTask2, "Task2", 2048, NULL, 1, &TaskHandle_2);

 // Initial values for global variables

 G_DataID = 1; // Example initial value, change as needed

 G_DataValue = 0; // Example initial value, change as needed

}

void loop() {

 // The loop function is not used in this FreeRTOS example

 vTaskDelay(pdMS_TO_TICKS(1000)); // Optional: Add a delay to keep the loop 

function active

}
